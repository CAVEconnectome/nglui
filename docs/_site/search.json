[
  {
    "objectID": "reference/nglui.statebuilder.layers.ImageLayerConfig.html",
    "href": "reference/nglui.statebuilder.layers.ImageLayerConfig.html",
    "title": "ImageLayerConfig",
    "section": "",
    "text": "statebuilder.layers.ImageLayerConfig(self, source, name=None, active=False, contrast_controls=False, black=0.0, white=1.0)\nImage layer configuration class.\nThis provides the rules for setting up an image layer in neuroglancer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.ImageLayerConfig.html#parameters",
    "href": "reference/nglui.statebuilder.layers.ImageLayerConfig.html#parameters",
    "title": "ImageLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/parser.base.view_settings.html",
    "href": "reference/parser.base.view_settings.html",
    "title": "parser.base.view_settings",
    "section": "",
    "text": "parser.base.view_settings(state)\nGet all data about the view state in neuroglancer: position, image zoom, orientation and zoom of the 3d view, and voxel size.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndict\nDictionary with keys: position, zoomFactor, perspectiveOrientation, perspectiveZoom, and voxelSize"
  },
  {
    "objectID": "reference/parser.base.view_settings.html#parameters",
    "href": "reference/parser.base.view_settings.html#parameters",
    "title": "parser.base.view_settings",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired"
  },
  {
    "objectID": "reference/parser.base.view_settings.html#returns",
    "href": "reference/parser.base.view_settings.html#returns",
    "title": "parser.base.view_settings",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ndict\nDictionary with keys: position, zoomFactor, perspectiveOrientation, perspectiveZoom, and voxelSize"
  },
  {
    "objectID": "reference/statebuilder.PointMapper.html",
    "href": "reference/statebuilder.PointMapper.html",
    "title": "statebuilder.PointMapper",
    "section": "",
    "text": "statebuilder.PointMapper(self, point_column=None, description_column=None, linked_segmentation_column=None, tag_column=None, group_column=None, gather_linked_segmentations=True, share_linked_segmentations=False, set_position=True, multipoint=False, collapse_groups=False, split_positions=False, mapping_set=None)\nSets rules to map dataframes to point annotations\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npoint_column\nstr\nColumn name with 3d position data\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data.\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf given, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/statebuilder.PointMapper.html#parameters",
    "href": "reference/statebuilder.PointMapper.html#parameters",
    "title": "statebuilder.PointMapper",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npoint_column\nstr\nColumn name with 3d position data\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data.\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf given, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/parser.base.group_annotations.html",
    "href": "reference/parser.base.group_annotations.html",
    "title": "parser.base.group_annotations",
    "section": "",
    "text": "parser.base.group_annotations(state, layer_name, description=False, linked_segmentations=False, tags=False)\nAll group annotations and their associated points\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nAnnotation layer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of N 3-element points\n\n\nlist\nList of N id strings for groups.\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True."
  },
  {
    "objectID": "reference/parser.base.group_annotations.html#parameters",
    "href": "reference/parser.base.group_annotations.html#parameters",
    "title": "parser.base.group_annotations",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nAnnotation layer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse"
  },
  {
    "objectID": "reference/parser.base.group_annotations.html#returns",
    "href": "reference/parser.base.group_annotations.html#returns",
    "title": "parser.base.group_annotations",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of N 3-element points\n\n\nlist\nList of N id strings for groups.\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True."
  },
  {
    "objectID": "reference/statebuilder.html",
    "href": "reference/statebuilder.html",
    "title": "StateBuilder",
    "section": "",
    "text": "statebuilder.statebuilder.StateBuilder(self, layers=[], base_state=None, url_prefix=None, state_server=None, resolution=None, view_kws={}, client=None, target_site=None)\nA class for schematic mapping data frames into neuroglancer states.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlayers\n\n\n[]\n\n\nbase_state\n\n\nNone\n\n\nurl_prefix\n\nDefaults to None, which will use https://neuromancer-seung-import.appspot.com\nNone\n\n\nstate_server\n\n\nNone\n\n\nresolution\n\n\nNone\n\n\nview_kws\n\nkeys are: show_slices: Boolean sets if slices are shown in the 3d view. Defaults to False. layout: str xy-3d/xz-3d/yz-3d (sections plus 3d pane), xy/yz/xz/3d (only one pane), or 4panel (all panes). Default is xy-3d. show_axis_lines: Boolean determines if the axis lines are shown in the middle of each view. show_scale_bar: Boolean toggles showing the scale bar. orthographic : Boolean toggles orthographic view in the 3d pane. position* : 3-element vector determines the centered location. zoom_image : float Zoom level for the imagery in units of nm per voxel. Defaults to 8. zoom_3d : float Zoom level for the 3d pane. Defaults to 2000. Smaller numbers are more zoomed in. background_color : str or list Sets the background color of the 3d view. Arguments can be rgb values, hex colors, or named web colors. Defaults to black.\n{}\n\n\nclient\n\n\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\ninitialize_state\nGenerate a new Neuroglancer state with layers as needed for the schema.\n\n\nrender_state\nBuild a Neuroglancer state out of a DataFrame.\n\n\n\n\n\nstatebuilder.statebuilder.StateBuilder.initialize_state(base_state=None, target_site=None)\nGenerate a new Neuroglancer state with layers as needed for the schema.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nbase_state\nstr\nOptional initial state to build on, described by its JSON. By default None.\nNone\n\n\n\n\n\n\n\nstatebuilder.statebuilder.StateBuilder.render_state(data=None, base_state=None, return_as='url', url_prefix=None, link_text='Neuroglancer Link', target_site=None)\nBuild a Neuroglancer state out of a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nDataFrame to use as a point source. By default None, for which it will return only the base_state and any fixed values.\nNone\n\n\nbase_state\ndict\nInitial state to build on, expressed as Neuroglancer JSON. By default None\nNone\n\n\nreturn_as\n[url, nglui.statebuilder.statebuilder.StateBuilder.viewer, html, json, dict, shared]\nChoice of output types. Note that if a viewer is returned, the state is not reset. url : Returns the raw url describing the state viewer : Returns an EasyViewer object holding the state information html : Returns an HTML link to the url, useful for notebooks. json : Returns a JSON string describing the state. dict : Returns a dict version of the JSON state. By default ‘url’\n'url'\n\n\nurl_prefix\nstr\nNeuroglancer URL prefix to use. By default None, for which it will open with the class default.\nNone\n\n\nlink_text\nstr\nText to use for the link when returning as html, by default ‘Neuroglancer Link’\n'Neuroglancer Link'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstring or neuroglancer.neuroglancer.Viewer\nA link to or viewer for a Neuroglancer state with layers, annotations, and selected objects determined by the data."
  },
  {
    "objectID": "reference/statebuilder.html#parameters",
    "href": "reference/statebuilder.html#parameters",
    "title": "StateBuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nlayers\n\n\n[]\n\n\nbase_state\n\n\nNone\n\n\nurl_prefix\n\nDefaults to None, which will use https://neuromancer-seung-import.appspot.com\nNone\n\n\nstate_server\n\n\nNone\n\n\nresolution\n\n\nNone\n\n\nview_kws\n\nkeys are: show_slices: Boolean sets if slices are shown in the 3d view. Defaults to False. layout: str xy-3d/xz-3d/yz-3d (sections plus 3d pane), xy/yz/xz/3d (only one pane), or 4panel (all panes). Default is xy-3d. show_axis_lines: Boolean determines if the axis lines are shown in the middle of each view. show_scale_bar: Boolean toggles showing the scale bar. orthographic : Boolean toggles orthographic view in the 3d pane. position* : 3-element vector determines the centered location. zoom_image : float Zoom level for the imagery in units of nm per voxel. Defaults to 8. zoom_3d : float Zoom level for the 3d pane. Defaults to 2000. Smaller numbers are more zoomed in. background_color : str or list Sets the background color of the 3d view. Arguments can be rgb values, hex colors, or named web colors. Defaults to black.\n{}\n\n\nclient\n\n\nNone"
  },
  {
    "objectID": "reference/statebuilder.html#methods",
    "href": "reference/statebuilder.html#methods",
    "title": "StateBuilder",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\ninitialize_state\nGenerate a new Neuroglancer state with layers as needed for the schema.\n\n\nrender_state\nBuild a Neuroglancer state out of a DataFrame.\n\n\n\n\n\nstatebuilder.statebuilder.StateBuilder.initialize_state(base_state=None, target_site=None)\nGenerate a new Neuroglancer state with layers as needed for the schema.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nbase_state\nstr\nOptional initial state to build on, described by its JSON. By default None.\nNone\n\n\n\n\n\n\n\nstatebuilder.statebuilder.StateBuilder.render_state(data=None, base_state=None, return_as='url', url_prefix=None, link_text='Neuroglancer Link', target_site=None)\nBuild a Neuroglancer state out of a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nDataFrame to use as a point source. By default None, for which it will return only the base_state and any fixed values.\nNone\n\n\nbase_state\ndict\nInitial state to build on, expressed as Neuroglancer JSON. By default None\nNone\n\n\nreturn_as\n[url, nglui.statebuilder.statebuilder.StateBuilder.viewer, html, json, dict, shared]\nChoice of output types. Note that if a viewer is returned, the state is not reset. url : Returns the raw url describing the state viewer : Returns an EasyViewer object holding the state information html : Returns an HTML link to the url, useful for notebooks. json : Returns a JSON string describing the state. dict : Returns a dict version of the JSON state. By default ‘url’\n'url'\n\n\nurl_prefix\nstr\nNeuroglancer URL prefix to use. By default None, for which it will open with the class default.\nNone\n\n\nlink_text\nstr\nText to use for the link when returning as html, by default ‘Neuroglancer Link’\n'Neuroglancer Link'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstring or neuroglancer.neuroglancer.Viewer\nA link to or viewer for a Neuroglancer state with layers, annotations, and selected objects determined by the data."
  },
  {
    "objectID": "reference/parser.base.layer_names.html",
    "href": "reference/parser.base.layer_names.html",
    "title": "parser.base.layer_names",
    "section": "",
    "text": "parser.base.layer_names(state)\nGet all layer names in the state\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/parser.base.layer_names.html#parameters",
    "href": "reference/parser.base.layer_names.html#parameters",
    "title": "parser.base.layer_names",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired"
  },
  {
    "objectID": "reference/parser.base.layer_names.html#returns",
    "href": "reference/parser.base.layer_names.html#returns",
    "title": "parser.base.layer_names",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/statebuilder.helpers.sort_dataframe_by_root_id.html",
    "href": "reference/statebuilder.helpers.sort_dataframe_by_root_id.html",
    "title": "statebuilder.helpers.sort_dataframe_by_root_id",
    "section": "",
    "text": "statebuilder.helpers.sort_dataframe_by_root_id(df, root_id_column, ascending=False, num_column='n_times', drop=False)\nSort a dataframe so that rows belonging to the same root id are together, ordered by how many times the root id appears.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\ndataframe to sort\nrequired\n\n\nroot_id_column\nstr\nColumn name to use for sorting root ids\nrequired\n\n\nascending\nbool\nWhether to sort ascending (lowest count to highest) or not, by default False\nFalse\n\n\nnum_column\nstr\nTemporary column name to use for count information, by default ‘n_times’\n'n_times'\n\n\ndrop\nbool\nIf True, drop the additional column when returning.\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/statebuilder.helpers.sort_dataframe_by_root_id.html#parameters",
    "href": "reference/statebuilder.helpers.sort_dataframe_by_root_id.html#parameters",
    "title": "statebuilder.helpers.sort_dataframe_by_root_id",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\ndataframe to sort\nrequired\n\n\nroot_id_column\nstr\nColumn name to use for sorting root ids\nrequired\n\n\nascending\nbool\nWhether to sort ascending (lowest count to highest) or not, by default False\nFalse\n\n\nnum_column\nstr\nTemporary column name to use for count information, by default ‘n_times’\n'n_times'\n\n\ndrop\nbool\nIf True, drop the additional column when returning.\nFalse"
  },
  {
    "objectID": "reference/statebuilder.helpers.sort_dataframe_by_root_id.html#returns",
    "href": "reference/statebuilder.helpers.sort_dataframe_by_root_id.html#returns",
    "title": "statebuilder.helpers.sort_dataframe_by_root_id",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/statebuilder.ChainedStateBuilder.html",
    "href": "reference/statebuilder.ChainedStateBuilder.html",
    "title": "statebuilder.ChainedStateBuilder",
    "section": "",
    "text": "statebuilder.ChainedStateBuilder(self, statebuilders)\nBuilds a collection of states that sequentially add annotations based on a sequence of dataframes.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstatebuilders\nlist\nList of DataStateBuilders, in same order as dataframes will be passed\nrequired"
  },
  {
    "objectID": "reference/statebuilder.ChainedStateBuilder.html#parameters",
    "href": "reference/statebuilder.ChainedStateBuilder.html#parameters",
    "title": "statebuilder.ChainedStateBuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstatebuilders\nlist\nList of DataStateBuilders, in same order as dataframes will be passed\nrequired"
  },
  {
    "objectID": "reference/parser.base.annotation_dataframe.html",
    "href": "reference/parser.base.annotation_dataframe.html",
    "title": "parser.base.annotation_dataframe",
    "section": "",
    "text": "parser.base.annotation_dataframe(state)\nReturn all annotations across all annotation layers in the state.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state dictionary\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\nDataframe with columns layer, anno_type, point, pointB, linked_segmentation, tags, anno_id, group_id, description."
  },
  {
    "objectID": "reference/parser.base.annotation_dataframe.html#parameters",
    "href": "reference/parser.base.annotation_dataframe.html#parameters",
    "title": "parser.base.annotation_dataframe",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state dictionary\nrequired"
  },
  {
    "objectID": "reference/parser.base.annotation_dataframe.html#returns",
    "href": "reference/parser.base.annotation_dataframe.html#returns",
    "title": "parser.base.annotation_dataframe",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame\nDataframe with columns layer, anno_type, point, pointB, linked_segmentation, tags, anno_id, group_id, description."
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.SegmentationLayerConfig.html",
    "href": "reference/nglui.statebuilder.layers.SegmentationLayerConfig.html",
    "title": "SegmentationLayerConfig",
    "section": "",
    "text": "statebuilder.layers.SegmentationLayerConfig(self, source, name=None, selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None, active=False, alpha_selected=0.3, alpha_3d=1, alpha_unselected=0, split_point_map=None, view_kws=None, timestamp=None, data_resolution=None)\nConfiguration class for segmentation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.SegmentationLayerConfig.html#parameters",
    "href": "reference/nglui.statebuilder.layers.SegmentationLayerConfig.html#parameters",
    "title": "SegmentationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.SegmentationLayerConfig.html#methods",
    "href": "reference/nglui.statebuilder.layers.SegmentationLayerConfig.html#methods",
    "title": "SegmentationLayerConfig",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.LayerConfigBase.html",
    "href": "reference/nglui.statebuilder.layers.LayerConfigBase.html",
    "title": "LayerConfigBase",
    "section": "",
    "text": "statebuilder.layers.LayerConfigBase(self, name, type, source, color, active)\nBase class for configuring layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name for reference and display\nrequired\n\n\ntype\nstr\nLayer type. Usually handled by the subclass\nrequired\n\n\nsource\nstr\nDatasource for the layer\nrequired\n\n\ncolor\nstr\nHex string (with starting hash).\nrequired\n\n\nactive\n(bool)\nIf True, becomes a selected layer.\nrequired"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.LayerConfigBase.html#parameters",
    "href": "reference/nglui.statebuilder.layers.LayerConfigBase.html#parameters",
    "title": "LayerConfigBase",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name for reference and display\nrequired\n\n\ntype\nstr\nLayer type. Usually handled by the subclass\nrequired\n\n\nsource\nstr\nDatasource for the layer\nrequired\n\n\ncolor\nstr\nHex string (with starting hash).\nrequired\n\n\nactive\n(bool)\nIf True, becomes a selected layer.\nrequired"
  },
  {
    "objectID": "reference/parser.base.point_annotations.html",
    "href": "reference/parser.base.point_annotations.html",
    "title": "parser.base.point_annotations",
    "section": "",
    "text": "parser.base.point_annotations(state, layer_name, description=False, linked_segmentations=False, tags=False, group=False)\nGet all point annotation points and other info from a layer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nLayer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of N 3-element points (as list)\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True.\n\n\nlist\nList of group ids (as string) or None for annotations. Only returned if group=True"
  },
  {
    "objectID": "reference/parser.base.point_annotations.html#parameters",
    "href": "reference/parser.base.point_annotations.html#parameters",
    "title": "parser.base.point_annotations",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nLayer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse"
  },
  {
    "objectID": "reference/parser.base.point_annotations.html#returns",
    "href": "reference/parser.base.point_annotations.html#returns",
    "title": "parser.base.point_annotations",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of N 3-element points (as list)\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True.\n\n\nlist\nList of group ids (as string) or None for annotations. Only returned if group=True"
  },
  {
    "objectID": "reference/parser.base.get_layer.html",
    "href": "reference/parser.base.get_layer.html",
    "title": "parser.base.get_layer",
    "section": "",
    "text": "parser.base.get_layer(state, layer_name)\nGets the contents of the layer based on the layer name.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired\n\n\nlayer_name\nstr\nName of layer\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ndict\nLayer data contents"
  },
  {
    "objectID": "reference/parser.base.get_layer.html#parameters",
    "href": "reference/parser.base.get_layer.html#parameters",
    "title": "parser.base.get_layer",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired\n\n\nlayer_name\nstr\nName of layer\nrequired"
  },
  {
    "objectID": "reference/parser.base.get_layer.html#returns",
    "href": "reference/parser.base.get_layer.html#returns",
    "title": "parser.base.get_layer",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ndict\nLayer data contents"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function Intro",
    "section": "",
    "text": "This site provides basic documentation for the functions in NGLui. Please see the tutorials for more information about how to use them.\nNote that nglui spans two public submodules responsible for different tasks.\n\nStateBuilder handles data-driven Neuroglancer state generation (hence the package name).\nParser extracts information from Neuroglancer states, as represented by dictionaries."
  },
  {
    "objectID": "reference/index.html#statebuilder-functions",
    "href": "reference/index.html#statebuilder-functions",
    "title": "Function Intro",
    "section": "StateBuilder Functions",
    "text": "StateBuilder Functions\n\nLayers\nInstantiating types of layers\n\n\n\nstatebuilder.ImageLayerConfig\nImage layer configuration class.\n\n\nstatebuilder.SegmentationLayerConfig\nConfiguration class for segmentation layers\n\n\nstatebuilder.AnnotationLayerConfig\nConfiguration class for annotation layers\n\n\n\n\n\nMapping Rules\nRules for mapping data to annotations\n\n\n\nstatebuilder.PointMapper\nSets rules to map dataframes to point annotations\n\n\nstatebuilder.LineMapper\nSets rules to map dataframes to line annotations\n\n\nstatebuilder.SphereMapper\nSets rules to map dataframes to sphere annotations\n\n\nstatebuilder.BoundingBoxMapper\nSets rules to map dataframes to bounding box annotations\n\n\nstatebuilder.SplitPointMapper\nMapper to create split points in a segmentation layer.\n\n\n\n\n\nStateBuilder Classes\nTools for data-generated neuroglancer state creation\n\n\n\nstatebuilder.StateBuilder\nA class for schematic mapping data frames into neuroglancer states.\n\n\nstatebuilder.ChainedStateBuilder\nBuilds a collection of states that sequentially add annotations based on a sequence of dataframes.\n\n\n\n\n\nHelpers\nTools for common types of states\n\n\n\nstatebuilder.helpers.from_client\nGenerate basic image and segmentation layers from a FrameworkClient\n\n\nstatebuilder.helpers.sort_dataframe_by_root_id\nSort a dataframe so that rows belonging to the same root id are together, ordered by how many times the root id appears.\n\n\nstatebuilder.helpers.make_line_statebuilder\nGenerate a state builder that puts points on a single column with a linked segmentaton id\n\n\nstatebuilder.helpers.make_point_statebuilder\nGenerate a state builder that puts points on a single column with a linked segmentaton id\n\n\nstatebuilder.helpers.make_pre_post_statebuilder\nFunction to generate ChainedStateBuilder with optional pre and post synaptic\n\n\nstatebuilder.helpers.make_state_url\nGenerate a url from a neuroglancer state via a state server.\n\n\nstatebuilder.helpers.make_url_robust\nGenerate a url from a neuroglancer state. If too long, return through state server,\n\n\nstatebuilder.helpers.package_state\nAutomate creating a state from a statebuilder and\n\n\nstatebuilder.helpers.make_synapse_neuroglancer_link\nGenerate a neuroglancer link from a synapse dataframe as returned from CAVEclient.materialize.synapse_query.\n\n\nstatebuilder.helpers.make_neuron_neuroglancer_link\nfunction to create a neuroglancer link view of a neuron, optionally including inputs and outputs"
  },
  {
    "objectID": "reference/index.html#parser",
    "href": "reference/index.html#parser",
    "title": "Function Intro",
    "section": "Parser",
    "text": "Parser\n\nParser Tools\nSimple tools for parsing neuroglancer states\n\n\n\nparser.base.layer_names\nGet all layer names in the state\n\n\nparser.base.image_layers\nGet all image layer names in the state\n\n\nparser.base.segmentation_layers\nGet all segmentation layer names in the state\n\n\nparser.base.annotation_layers\nGet all annotation layer names in the state\n\n\nparser.base.tag_dictionary\nGet the tag id to string dictionary for a layer\n\n\nparser.base.get_layer\nGets the contents of the layer based on the layer name.\n\n\nparser.base.view_settings\nGet all data about the view state in neuroglancer: position,\n\n\nparser.base.get_selected_ids\nGet a list of selected ids in a segmentation layer\n\n\nparser.base.point_annotations\nGet all point annotation points and other info from a layer.\n\n\nparser.base.line_annotations\nGet all line annotation points and other info from a layer.\n\n\nparser.base.sphere_annotations\nGet all sphere annotation points and other info from a layer.\n\n\nparser.base.group_annotations\nAll group annotations and their associated points\n\n\nparser.base.extract_multicut\nExtract information entered into the multicut graph operation\n\n\nparser.base.annotation_dataframe\nReturn all annotations across all annotation layers in the state."
  },
  {
    "objectID": "reference/AnnotationLayerConfig.html",
    "href": "reference/AnnotationLayerConfig.html",
    "title": "AnnotationLayerConfig",
    "section": "",
    "text": "statebuilder.layers.AnnotationLayerConfig(self, name=None, color=None, linked_segmentation_layer=None, mapping_rules=[], array_data=False, tags=None, active=True, filter_by_segmentation=False, brackets_show_segmentation=True, selection_shows_segmentation=True, filter_query=None, data_resolution=None)\nConfiguration class for annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/AnnotationLayerConfig.html#parameters",
    "href": "reference/AnnotationLayerConfig.html#parameters",
    "title": "AnnotationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/parser.base.get_selected_ids.html",
    "href": "reference/parser.base.get_selected_ids.html",
    "title": "parser.base.get_selected_ids",
    "section": "",
    "text": "parser.base.get_selected_ids(state, layer=None)\nGet a list of selected ids in a segmentation layer\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nState dict\nrequired\n\n\nlayer\nstr\nSegmentation layer name, if needed. If None and only one segmentation layer is present, default to it. By default None\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of root ids."
  },
  {
    "objectID": "reference/parser.base.get_selected_ids.html#parameters",
    "href": "reference/parser.base.get_selected_ids.html#parameters",
    "title": "parser.base.get_selected_ids",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nState dict\nrequired\n\n\nlayer\nstr\nSegmentation layer name, if needed. If None and only one segmentation layer is present, default to it. By default None\nNone"
  },
  {
    "objectID": "reference/parser.base.get_selected_ids.html#returns",
    "href": "reference/parser.base.get_selected_ids.html#returns",
    "title": "parser.base.get_selected_ids",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of root ids."
  },
  {
    "objectID": "reference/statebuilder.SplitPointMapper.html",
    "href": "reference/statebuilder.SplitPointMapper.html",
    "title": "statebuilder.SplitPointMapper",
    "section": "",
    "text": "statebuilder.SplitPointMapper(self, id_column, point_column, team_column, team_names=['red', 'blue'], supervoxel_column=None, focus=True, mapping_set=None)\nMapper to create split points in a segmentation layer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nid_column\nstr\nColumn name for segment ids. The id column must contain the same id in all rows.\nrequired\n\n\npoint_column\nstr\nName of the column containing points in space.\nrequired\n\n\nteam_column\nstr\nName of the column describing the team for the points. The contents of the column should have two values, by default “red” and “blue”.\nrequired\n\n\nteam_names\nlist\nList of two values for the team names used in the team column. The first is mapped to red points, the second blue. Default is [“red”, “blue”].\n['red', 'blue']\n\n\nsupervoxel_column\nstr or None\nName of a column providing supervoxel ids. If None (default), the supervoxel must be looked up on the server.\nNone\n\n\nfocus\nbool\nIf True, sets the focus on the split tool and sets the position to the center of split points. Default is True.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSplitPointMapper instance to pass to a segmentation layer."
  },
  {
    "objectID": "reference/statebuilder.SplitPointMapper.html#parameters",
    "href": "reference/statebuilder.SplitPointMapper.html#parameters",
    "title": "statebuilder.SplitPointMapper",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nid_column\nstr\nColumn name for segment ids. The id column must contain the same id in all rows.\nrequired\n\n\npoint_column\nstr\nName of the column containing points in space.\nrequired\n\n\nteam_column\nstr\nName of the column describing the team for the points. The contents of the column should have two values, by default “red” and “blue”.\nrequired\n\n\nteam_names\nlist\nList of two values for the team names used in the team column. The first is mapped to red points, the second blue. Default is [“red”, “blue”].\n['red', 'blue']\n\n\nsupervoxel_column\nstr or None\nName of a column providing supervoxel ids. If None (default), the supervoxel must be looked up on the server.\nNone\n\n\nfocus\nbool\nIf True, sets the focus on the split tool and sets the position to the center of split points. Default is True.\nTrue"
  },
  {
    "objectID": "reference/statebuilder.SplitPointMapper.html#returns",
    "href": "reference/statebuilder.SplitPointMapper.html#returns",
    "title": "statebuilder.SplitPointMapper",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nSplitPointMapper instance to pass to a segmentation layer."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html",
    "href": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html",
    "title": "statebuilder.helpers.make_synapse_neuroglancer_link",
    "section": "",
    "text": "statebuilder.helpers.make_synapse_neuroglancer_link(synapse_df, client, return_as='html', shorten='always', contrast=None, point_column='ctr_pt_position', dataframe_resolution=None, group_connections=True, link_pre_and_post=True, ngl_url=None, view_kws=None, pre_post_columns=None, neuroglancer_link_text='Neuroglancer Link', color=None, split_positions=False, target_site=None)\nGenerate a neuroglancer link from a synapse dataframe as returned from CAVEclient.materialize.synapse_query.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsynapse_df\npandas.pandas.DataFrame\nDataFrame where each row represents a synapse.\nrequired\n\n\nclient\ncaveclient.caveclient.CAVEclient\nA CAVEclient instance.\nrequired\n\n\nreturn_as\nstr\nHow to return the URL. Valid options are: - ‘html’: Returns an IPython HTML element. - ‘url’: Returns a URL string. - ‘json’: Returns a dictionary representing the Neuroglancer state. Defaults to ‘html’.\n'html'\n\n\nshorten\nstr\nWhether to shorten the link. Valid options are: - ‘always’: Always shorten the link. - ‘if_long’: Shorten the link if it exceeds MAX_URL_LENGTH. - ‘never’: Never shorten the link. Defaults to ‘always’.\n'always'\n\n\ncontrast\nlist\nList of two floats between 0 and 1, specifying the black and white levels. If None, no contrast is set.\nNone\n\n\npoint_column\nstr\nColumn in the DataFrame containing synapse positions. Defaults to ‘ctr_pt_position’.\n'ctr_pt_position'\n\n\ndataframe_resolution\nlist\nList of length 3, specifying the resolution units of the position column. If None, attempts to get the resolution from DataFrame metadata or client.info.viewer_resolution().\nNone\n\n\ngroup_connections\nbool\nWhether to group synapses within the same connection (between the same neurons). Defaults to True.\nTrue\n\n\nlink_pre_and_post\nbool\nWhether to link the synapse annotations to the pre- and post-synaptic partners. Defaults to True.\nTrue\n\n\nngl_url\nstr\nURL of the Neuroglancer instance to use. Defaults to client.info.viewer_site() or DEFAULT_NGL.\nNone\n\n\nview_kws\ndict\nDictionary containing viewer settings for Neuroglancer. Available keys: - show_slices: Boolean, sets if slices are shown in the 3D view. - layout: str, specifies the viewer layout (e.g., ‘xy-3d’, ‘4panel’). - show_axis_lines: Boolean, determines if axis lines are shown. - show_scale_bar: Boolean, toggles the scale bar. - orthographic: Boolean, toggles orthographic view in the 3D pane. - position: 3-element vector, sets the centered location. - zoom_image: float, zoom level for the imagery in nm per voxel. - zoom_3d: float, zoom level for the 3D pane.\nNone\n\n\npre_post_columns\nlist\nList of two strings, specifying the column names for pre- and post-synaptic root_ids. Defaults to [‘pre_pt_root_id’, ‘post_pt_root_id’].\nNone\n\n\nneuroglancer_link_text\nstr\nText to use in the returned HTML link. Defaults to ‘Neuroglancer Link’.\n'Neuroglancer Link'\n\n\ncolor\nlist(float) or str\nColor of synapse points as an RGB list [0, 1], hex string, or common name.\nNone\n\n\nsplit_positions\nbool\nWhether the position column is split into x, y, and z columns.\nFalse\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nIPython.HTML, str, or dict\nRepresentation of the Neuroglancer state, depending on the return_as parameter.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf the specified point_column is not found in the DataFrame."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html#parameters",
    "href": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html#parameters",
    "title": "statebuilder.helpers.make_synapse_neuroglancer_link",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsynapse_df\npandas.pandas.DataFrame\nDataFrame where each row represents a synapse.\nrequired\n\n\nclient\ncaveclient.caveclient.CAVEclient\nA CAVEclient instance.\nrequired\n\n\nreturn_as\nstr\nHow to return the URL. Valid options are: - ‘html’: Returns an IPython HTML element. - ‘url’: Returns a URL string. - ‘json’: Returns a dictionary representing the Neuroglancer state. Defaults to ‘html’.\n'html'\n\n\nshorten\nstr\nWhether to shorten the link. Valid options are: - ‘always’: Always shorten the link. - ‘if_long’: Shorten the link if it exceeds MAX_URL_LENGTH. - ‘never’: Never shorten the link. Defaults to ‘always’.\n'always'\n\n\ncontrast\nlist\nList of two floats between 0 and 1, specifying the black and white levels. If None, no contrast is set.\nNone\n\n\npoint_column\nstr\nColumn in the DataFrame containing synapse positions. Defaults to ‘ctr_pt_position’.\n'ctr_pt_position'\n\n\ndataframe_resolution\nlist\nList of length 3, specifying the resolution units of the position column. If None, attempts to get the resolution from DataFrame metadata or client.info.viewer_resolution().\nNone\n\n\ngroup_connections\nbool\nWhether to group synapses within the same connection (between the same neurons). Defaults to True.\nTrue\n\n\nlink_pre_and_post\nbool\nWhether to link the synapse annotations to the pre- and post-synaptic partners. Defaults to True.\nTrue\n\n\nngl_url\nstr\nURL of the Neuroglancer instance to use. Defaults to client.info.viewer_site() or DEFAULT_NGL.\nNone\n\n\nview_kws\ndict\nDictionary containing viewer settings for Neuroglancer. Available keys: - show_slices: Boolean, sets if slices are shown in the 3D view. - layout: str, specifies the viewer layout (e.g., ‘xy-3d’, ‘4panel’). - show_axis_lines: Boolean, determines if axis lines are shown. - show_scale_bar: Boolean, toggles the scale bar. - orthographic: Boolean, toggles orthographic view in the 3D pane. - position: 3-element vector, sets the centered location. - zoom_image: float, zoom level for the imagery in nm per voxel. - zoom_3d: float, zoom level for the 3D pane.\nNone\n\n\npre_post_columns\nlist\nList of two strings, specifying the column names for pre- and post-synaptic root_ids. Defaults to [‘pre_pt_root_id’, ‘post_pt_root_id’].\nNone\n\n\nneuroglancer_link_text\nstr\nText to use in the returned HTML link. Defaults to ‘Neuroglancer Link’.\n'Neuroglancer Link'\n\n\ncolor\nlist(float) or str\nColor of synapse points as an RGB list [0, 1], hex string, or common name.\nNone\n\n\nsplit_positions\nbool\nWhether the position column is split into x, y, and z columns.\nFalse\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html#returns",
    "href": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html#returns",
    "title": "statebuilder.helpers.make_synapse_neuroglancer_link",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nIPython.HTML, str, or dict\nRepresentation of the Neuroglancer state, depending on the return_as parameter."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html#raises",
    "href": "reference/statebuilder.helpers.make_synapse_neuroglancer_link.html#raises",
    "title": "statebuilder.helpers.make_synapse_neuroglancer_link",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nValueError\nIf the specified point_column is not found in the DataFrame."
  },
  {
    "objectID": "reference/nglui.statebuilder.statebuilder.StateBuilder.initialize_state.html",
    "href": "reference/nglui.statebuilder.statebuilder.StateBuilder.initialize_state.html",
    "title": "initialize_state",
    "section": "",
    "text": "statebuilder.statebuilder.StateBuilder.initialize_state(base_state=None, target_site=None)\nGenerate a new Neuroglancer state with layers as needed for the schema.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nbase_state\nstr\nOptional initial state to build on, described by its JSON. By default None.\nNone"
  },
  {
    "objectID": "reference/nglui.statebuilder.statebuilder.StateBuilder.initialize_state.html#parameters",
    "href": "reference/nglui.statebuilder.statebuilder.StateBuilder.initialize_state.html#parameters",
    "title": "initialize_state",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nbase_state\nstr\nOptional initial state to build on, described by its JSON. By default None.\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.package_state.html",
    "href": "reference/statebuilder.helpers.package_state.html",
    "title": "statebuilder.helpers.package_state",
    "section": "",
    "text": "statebuilder.helpers.package_state(df, sb, client, shorten='if_long', return_as='url', ngl_url=None, link_text='Neuroglancer Link', target_site=None)\nAutomate creating a state from a statebuilder and a dataframe, return it in the desired format, shortening if desired."
  },
  {
    "objectID": "reference/statebuilder.helpers.package_state.html#parameters",
    "href": "reference/statebuilder.helpers.package_state.html#parameters",
    "title": "statebuilder.helpers.package_state",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\nDataframe to pass through statebuilder\nrequired\n\n\nsb\nnglui.statebuilder.statebuilder.nglui.statebuilder.statebuilder.StateBuilder\nStatebuilder to use to render data for link\nrequired\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured with a state server\nrequired\n\n\nshorten\nstr\nHow to shorten link. one of ‘if_long’, ‘always’, ‘never’. ‘if_long’ will use the state server to shorten links longer than nglui.statebuilder.MAX_URL_LENGTH (set to 1,750,000). ‘always’ will always use the state server to shorten the url ‘never’ will always return the full url. Defaults to “if_long”.\n'if_long'\n\n\nreturn_as\nstr\nHow to return the state. one of ‘html’, ‘url’, ‘json’. ‘html’ will return an ipython clickable link ‘url’ will return a string with the url ‘json’ will return the state as a dictionary\n'url'\n\n\nngl_url\nstr\nNeuroglancer deployment URL, by default None\nNone\n\n\nlink_text\nstr\nText to use for the link, by default “Neuroglancer Link”\n'Neuroglancer Link'\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.package_state.html#returns",
    "href": "reference/statebuilder.helpers.package_state.html#returns",
    "title": "statebuilder.helpers.package_state",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n(IPython.display.HTML, str or dict)\nstate in format specified by return_as"
  },
  {
    "objectID": "reference/parser.base.line_annotations.html",
    "href": "reference/parser.base.line_annotations.html",
    "title": "parser.base.line_annotations",
    "section": "",
    "text": "parser.base.line_annotations(state, layer_name, description=False, linked_segmentations=False, tags=False, group=False)\nGet all line annotation points and other info from a layer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nLayer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of N 3-element points (as list) of the first point in each line.\n\n\nlist\nList of N 3-element points (as list) of the second point in each line.\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True.\n\n\nlist\nList of group ids (as string) or None for annotations. Only returned if group=True"
  },
  {
    "objectID": "reference/parser.base.line_annotations.html#parameters",
    "href": "reference/parser.base.line_annotations.html#parameters",
    "title": "parser.base.line_annotations",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nLayer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse"
  },
  {
    "objectID": "reference/parser.base.line_annotations.html#returns",
    "href": "reference/parser.base.line_annotations.html#returns",
    "title": "parser.base.line_annotations",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of N 3-element points (as list) of the first point in each line.\n\n\nlist\nList of N 3-element points (as list) of the second point in each line.\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True.\n\n\nlist\nList of group ids (as string) or None for annotations. Only returned if group=True"
  },
  {
    "objectID": "reference/statebuilder.AnnotationLayerConfig.html",
    "href": "reference/statebuilder.AnnotationLayerConfig.html",
    "title": "statebuilder.AnnotationLayerConfig",
    "section": "",
    "text": "statebuilder.AnnotationLayerConfig(self, name=None, color=None, linked_segmentation_layer=None, mapping_rules=[], array_data=False, tags=None, active=True, filter_by_segmentation=False, brackets_show_segmentation=True, selection_shows_segmentation=True, filter_query=None, data_resolution=None)\nConfiguration class for annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/statebuilder.AnnotationLayerConfig.html#parameters",
    "href": "reference/statebuilder.AnnotationLayerConfig.html#parameters",
    "title": "statebuilder.AnnotationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/statebuilder.LineMapper.html",
    "href": "reference/statebuilder.LineMapper.html",
    "title": "statebuilder.LineMapper",
    "section": "",
    "text": "statebuilder.LineMapper(self, point_column_a=None, point_column_b=None, description_column=None, linked_segmentation_column=None, tag_column=None, group_column=None, gather_linked_segmentations=True, share_linked_segmentations=False, set_position=True, multipoint=False, collapse_groups=False, split_positions=False, mapping_set=None)\nSets rules to map dataframes to line annotations\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npoint_column_a\nstr\nColumn name with 3d position data for the first point of the line. Must be set if array_data is False (the default)\nNone\n\n\npoint_column_b\nstr\nColumn name with 3d position data for the first point of the line. Must be set if array_data is False (the default)\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data (using point_column_a).\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Each point row must have the same number of points. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf set, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/statebuilder.LineMapper.html#parameters",
    "href": "reference/statebuilder.LineMapper.html#parameters",
    "title": "statebuilder.LineMapper",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npoint_column_a\nstr\nColumn name with 3d position data for the first point of the line. Must be set if array_data is False (the default)\nNone\n\n\npoint_column_b\nstr\nColumn name with 3d position data for the first point of the line. Must be set if array_data is False (the default)\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data (using point_column_a).\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Each point row must have the same number of points. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf set, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/SegmentationLayerConfig.html",
    "href": "reference/SegmentationLayerConfig.html",
    "title": "SegmentationLayerConfig",
    "section": "",
    "text": "statebuilder.layers.SegmentationLayerConfig(self, source, name=None, selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None, active=False, alpha_selected=0.3, alpha_3d=1, alpha_unselected=0, split_point_map=None, view_kws=None, timestamp=None, data_resolution=None)\nConfiguration class for segmentation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/SegmentationLayerConfig.html#parameters",
    "href": "reference/SegmentationLayerConfig.html#parameters",
    "title": "SegmentationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone"
  },
  {
    "objectID": "reference/SegmentationLayerConfig.html#methods",
    "href": "reference/SegmentationLayerConfig.html#methods",
    "title": "SegmentationLayerConfig",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_line_statebuilder.html",
    "href": "reference/statebuilder.helpers.make_line_statebuilder.html",
    "title": "statebuilder.helpers.make_line_statebuilder",
    "section": "",
    "text": "statebuilder.helpers.make_line_statebuilder(client, point_column_a='pre_pt_position', point_column_b='post_pt_position', linked_seg_column='pt_root_id', description_column=None, tag_column=None, data_resolution=None, group_column=None, contrast=None, view_kws=None, point_layer_name='lines', color=None, split_positions=False)\nGenerate a state builder that puts points on a single column with a linked segmentaton id\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured for the datastack desired\nrequired\n\n\npoint_column_a\nstr\ncolumn in dataframe to pull points from. Defaults to “pre_pt_position”.\n'pre_pt_position'\n\n\npoint_column_b\nstr\ncolumn in dataframe to pull points from. Defaults to “post_pt_position”.\n'post_pt_position'\n\n\nlinked_seg_column\nstr\ncolumn to link to segmentation, None for no column. Defaults to “pt_root_id”.\n'pt_root_id'\n\n\ngroup_column\nstr, or list\ncolumn(s) to group annotations by, None for no grouping (default=None)\nNone\n\n\ntag_column\nstr\ncolumn to use for tags, None for no tags (default=None)\nNone\n\n\ndescription_column\nstr\ncolumn to use for descriptions, None for no descriptions (default=None)\nNone\n\n\ncontrast\nlist\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\nview_kws\ndict\ndictionary of view keywords to configure neuroglancer view\nNone\n\n\nsplit_positions\nbool\nwhether the position column into x,y,z columns. Defaults to False.\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n\nA statebuilder to make points with linked segmentations"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_line_statebuilder.html#parameters",
    "href": "reference/statebuilder.helpers.make_line_statebuilder.html#parameters",
    "title": "statebuilder.helpers.make_line_statebuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured for the datastack desired\nrequired\n\n\npoint_column_a\nstr\ncolumn in dataframe to pull points from. Defaults to “pre_pt_position”.\n'pre_pt_position'\n\n\npoint_column_b\nstr\ncolumn in dataframe to pull points from. Defaults to “post_pt_position”.\n'post_pt_position'\n\n\nlinked_seg_column\nstr\ncolumn to link to segmentation, None for no column. Defaults to “pt_root_id”.\n'pt_root_id'\n\n\ngroup_column\nstr, or list\ncolumn(s) to group annotations by, None for no grouping (default=None)\nNone\n\n\ntag_column\nstr\ncolumn to use for tags, None for no tags (default=None)\nNone\n\n\ndescription_column\nstr\ncolumn to use for descriptions, None for no descriptions (default=None)\nNone\n\n\ncontrast\nlist\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\nview_kws\ndict\ndictionary of view keywords to configure neuroglancer view\nNone\n\n\nsplit_positions\nbool\nwhether the position column into x,y,z columns. Defaults to False.\nFalse"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_line_statebuilder.html#returns",
    "href": "reference/statebuilder.helpers.make_line_statebuilder.html#returns",
    "title": "statebuilder.helpers.make_line_statebuilder",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\n\nA statebuilder to make points with linked segmentations"
  },
  {
    "objectID": "reference/parser.base.extract_multicut.html",
    "href": "reference/parser.base.extract_multicut.html",
    "title": "parser.base.extract_multicut",
    "section": "",
    "text": "parser.base.extract_multicut(state, seg_layer=None)\nExtract information entered into the multicut graph operation\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state\nrequired\n\n\nseg_layer\nstr\nName of a segmentation layer or None. If None, the function will check how many segmentation layers there are and, if only one exits, choose it. If more than one segmentation layer is present, it errors. By default None\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnumpy.numpy.array\nNx3 array of points selected\n\n\nnumpy.numpy.array\nN array with ‘source’ or ‘sink’, depending on which side the point is on.\n\n\nnumpy.numpy.array\nN array with selected supervoxel. If only points are selected (e.g. via clicking on the mesh), the value will be NaN.\n\n\nint\nRoot id of the object to split"
  },
  {
    "objectID": "reference/parser.base.extract_multicut.html#parameters",
    "href": "reference/parser.base.extract_multicut.html#parameters",
    "title": "parser.base.extract_multicut",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state\nrequired\n\n\nseg_layer\nstr\nName of a segmentation layer or None. If None, the function will check how many segmentation layers there are and, if only one exits, choose it. If more than one segmentation layer is present, it errors. By default None\nNone"
  },
  {
    "objectID": "reference/parser.base.extract_multicut.html#returns",
    "href": "reference/parser.base.extract_multicut.html#returns",
    "title": "parser.base.extract_multicut",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnumpy.numpy.array\nNx3 array of points selected\n\n\nnumpy.numpy.array\nN array with ‘source’ or ‘sink’, depending on which side the point is on.\n\n\nnumpy.numpy.array\nN array with selected supervoxel. If only points are selected (e.g. via clicking on the mesh), the value will be NaN.\n\n\nint\nRoot id of the object to split"
  },
  {
    "objectID": "tutorials/statebuilder.html",
    "href": "tutorials/statebuilder.html",
    "title": "StateBuilder Tutorial",
    "section": "",
    "text": "The StateBuilder module is designed to allow rules-based generation of Neuroglancer states based on DataFrames or numpy arrays."
  },
  {
    "objectID": "tutorials/statebuilder.html#background",
    "href": "tutorials/statebuilder.html#background",
    "title": "StateBuilder Tutorial",
    "section": "Background",
    "text": "Background\nNeuroglancer is a web application for viewing large volumetric imagery and segmentation data, as well as meshes and annotations like points or lines. Data in Neuroglancer is organized into layers, where each layer is configured to show information like images, segmentation, or annotations. Each layer can show one type of data and has different properties associated with it. In addition, Neuroglancer also stores the exact view that the user sees — what location in the data is centered, the orientation and zoom level of the camera, and more. Collectively, the information underlying both layers and the user view is refered to as the “state,” which is stored as a collection of key/value pairs.\nStateBuilder follows this model by defining a set of rules for initializing layers. For layers that contain properties like selected segment ids or annotations, this configuration involves specifying how to map DataFrame columns to selected segmentations or annotations such as synapses. The general pattern is that you build up a collection of configurations for individual layers, assemble them into a StateBuilder object, and then pass a dataframe through this object to render out a state."
  },
  {
    "objectID": "tutorials/statebuilder.html#simple-layers-and-statebuilder",
    "href": "tutorials/statebuilder.html#simple-layers-and-statebuilder",
    "title": "StateBuilder Tutorial",
    "section": "Simple Layers and StateBuilder",
    "text": "Simple Layers and StateBuilder\nfrom nglui import statebuilder\n\nimg = statebuilder.ImageLayerConfig(\n    source=client.info.image_source(),\n    contrast_controls=True, # this just puts in the code needed to manually adjust contrast\n)\n\nseg = statebuilder.SegmentationLayerConfig(\n    source=client.info.segmentation_source(),\n)"
  },
  {
    "objectID": "tutorials/statebuilder.html#data-driven-states",
    "href": "tutorials/statebuilder.html#data-driven-states",
    "title": "StateBuilder Tutorial",
    "section": "Data-driven States",
    "text": "Data-driven States"
  },
  {
    "objectID": "tutorials/parser.html",
    "href": "tutorials/parser.html",
    "title": "Parser Tutorial",
    "section": "",
    "text": "Parser Tutorial\nBasics of how to use nglui parser."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Docs",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "Tutorials\nDo one thing, then another."
  },
  {
    "objectID": "reference/parser.base.segmentation_layers.html",
    "href": "reference/parser.base.segmentation_layers.html",
    "title": "parser.base.segmentation_layers",
    "section": "",
    "text": "parser.base.segmentation_layers(state)\nGet all segmentation layer names in the state\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/parser.base.segmentation_layers.html#parameters",
    "href": "reference/parser.base.segmentation_layers.html#parameters",
    "title": "parser.base.segmentation_layers",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired"
  },
  {
    "objectID": "reference/parser.base.segmentation_layers.html#returns",
    "href": "reference/parser.base.segmentation_layers.html#returns",
    "title": "parser.base.segmentation_layers",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/ChainedStateBuilder.html",
    "href": "reference/ChainedStateBuilder.html",
    "title": "ChainedStateBuilder",
    "section": "",
    "text": "statebuilder.statebuilder.ChainedStateBuilder(self, statebuilders)\nBuilds a collection of states that sequentially add annotations based on a sequence of dataframes.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstatebuilders\nlist\nList of DataStateBuilders, in same order as dataframes will be passed\nrequired\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nrender_state\nGenerate a single neuroglancer state by addatively applying an ordered collection of\n\n\n\n\n\nstatebuilder.statebuilder.ChainedStateBuilder.render_state(data_list=None, base_state=None, return_as='url', url_prefix=default_neuroglancer_base, link_text='Neuroglancer Link', target_site=None)\nGenerate a single neuroglancer state by addatively applying an ordered collection of dataframes to an collection of StateBuilder renders. Parameters data_list : Collection of DataFrame. The order must match the order of StateBuilders contained in the class on creation. base_state : JSON neuroglancer state (optional, default is None). Used as a base state for adding everything else to. return_as: [‘url’, ‘viewer’, ‘html’, ‘json’]. optional, default=‘url’. Sets how the state is returned. Note that if a viewer is returned, the state is not reset to default. url_prefix: string, optional (default is https://neuromancer-seung-import.appspot.com). Overrides the default neuroglancer url for url generation."
  },
  {
    "objectID": "reference/ChainedStateBuilder.html#parameters",
    "href": "reference/ChainedStateBuilder.html#parameters",
    "title": "ChainedStateBuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstatebuilders\nlist\nList of DataStateBuilders, in same order as dataframes will be passed\nrequired"
  },
  {
    "objectID": "reference/ChainedStateBuilder.html#methods",
    "href": "reference/ChainedStateBuilder.html#methods",
    "title": "ChainedStateBuilder",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nrender_state\nGenerate a single neuroglancer state by addatively applying an ordered collection of\n\n\n\n\n\nstatebuilder.statebuilder.ChainedStateBuilder.render_state(data_list=None, base_state=None, return_as='url', url_prefix=default_neuroglancer_base, link_text='Neuroglancer Link', target_site=None)\nGenerate a single neuroglancer state by addatively applying an ordered collection of dataframes to an collection of StateBuilder renders. Parameters data_list : Collection of DataFrame. The order must match the order of StateBuilders contained in the class on creation. base_state : JSON neuroglancer state (optional, default is None). Used as a base state for adding everything else to. return_as: [‘url’, ‘viewer’, ‘html’, ‘json’]. optional, default=‘url’. Sets how the state is returned. Note that if a viewer is returned, the state is not reset to default. url_prefix: string, optional (default is https://neuromancer-seung-import.appspot.com). Overrides the default neuroglancer url for url generation."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_pre_post_statebuilder.html",
    "href": "reference/statebuilder.helpers.make_pre_post_statebuilder.html",
    "title": "statebuilder.helpers.make_pre_post_statebuilder",
    "section": "",
    "text": "statebuilder.helpers.make_pre_post_statebuilder(client, show_inputs=False, show_outputs=False, contrast=None, view_kws=None, point_column='ctr_pt_position', pre_pt_root_id_col='pre_pt_root_id', post_pt_root_id_col='post_pt_root_id', dataframe_resolution_pre=None, dataframe_resolution_post=None, input_layer_name='syns_in', output_layer_name='syns_out', input_layer_color=DEFAULT_POSTSYN_COLOR, output_layer_color=DEFAULT_PRESYN_COLOR, split_positions=False)\nFunction to generate ChainedStateBuilder with optional pre and post synaptic annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\na CAVEclient configured for datastack to visualize\nrequired\n\n\nshow_inputs\nbool\nwhether to show input synapses. Defaults to False.\nFalse\n\n\nshow_outputs\nbool\nwhether to show output synapses.. Defaults to False.\nFalse\n\n\ncontrast\nlist\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\nview_kws\ndict\nview_kws to configure statebuilder, see nglui.StateBuilder. Defaults to None. keys are: show_slices: Boolean sets if slices are shown in the 3d view. Defaults to False. layout: str xy-3d/xz-3d/yz-3d (sections plus 3d pane), xy/yz/xz/3d (only one pane), or 4panel (all panes). Default is xy-3d. show_axis_lines: Boolean determines if the axis lines are shown in the middle of each view. show_scale_bar: Boolean toggles showing the scale bar. orthographic : Boolean toggles orthographic view in the 3d pane. position* : 3-element vector determines the centered location. zoom_image : float Zoom level for the imagery in units of nm per voxel. Defaults to 8. zoom_3d : float Zoom level for the 3d pane. Defaults to 2000. Smaller numbers are more zoomed in.\nNone\n\n\npoint_column\nstr\ncolumn to pull points for synapses from. Defaults to “ctr_pt_position”.\n'ctr_pt_position'\n\n\npre_pt_root_id_col\nstr\ncolumn to pull pre synaptic ids for synapses from. Defaults to “pre_pt_root_id”.\n'pre_pt_root_id'\n\n\npost_pt_root_id_col\nstr\ncolumn to pull post synaptic ids for synapses from. Defaults to “post_pt_root_id”.\n'post_pt_root_id'\n\n\ninput_layer_name\nstr\nname of layer for inputs. Defaults to “syns_in”.\n'syns_in'\n\n\noutput_layer_name\nstr\nname of layer for outputs. Defaults to “syns_out”.\n'syns_out'\n\n\nsplit_positions\nbool\nwhether the position column is split into x,y,z columns. Defaults to False.\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n\nAn instance of a ChainedStateBuilder configured to accept a list starting with None followed by optionally synapse input dataframe followed by optionally synapse output dataframe."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_pre_post_statebuilder.html#parameters",
    "href": "reference/statebuilder.helpers.make_pre_post_statebuilder.html#parameters",
    "title": "statebuilder.helpers.make_pre_post_statebuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\na CAVEclient configured for datastack to visualize\nrequired\n\n\nshow_inputs\nbool\nwhether to show input synapses. Defaults to False.\nFalse\n\n\nshow_outputs\nbool\nwhether to show output synapses.. Defaults to False.\nFalse\n\n\ncontrast\nlist\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\nview_kws\ndict\nview_kws to configure statebuilder, see nglui.StateBuilder. Defaults to None. keys are: show_slices: Boolean sets if slices are shown in the 3d view. Defaults to False. layout: str xy-3d/xz-3d/yz-3d (sections plus 3d pane), xy/yz/xz/3d (only one pane), or 4panel (all panes). Default is xy-3d. show_axis_lines: Boolean determines if the axis lines are shown in the middle of each view. show_scale_bar: Boolean toggles showing the scale bar. orthographic : Boolean toggles orthographic view in the 3d pane. position* : 3-element vector determines the centered location. zoom_image : float Zoom level for the imagery in units of nm per voxel. Defaults to 8. zoom_3d : float Zoom level for the 3d pane. Defaults to 2000. Smaller numbers are more zoomed in.\nNone\n\n\npoint_column\nstr\ncolumn to pull points for synapses from. Defaults to “ctr_pt_position”.\n'ctr_pt_position'\n\n\npre_pt_root_id_col\nstr\ncolumn to pull pre synaptic ids for synapses from. Defaults to “pre_pt_root_id”.\n'pre_pt_root_id'\n\n\npost_pt_root_id_col\nstr\ncolumn to pull post synaptic ids for synapses from. Defaults to “post_pt_root_id”.\n'post_pt_root_id'\n\n\ninput_layer_name\nstr\nname of layer for inputs. Defaults to “syns_in”.\n'syns_in'\n\n\noutput_layer_name\nstr\nname of layer for outputs. Defaults to “syns_out”.\n'syns_out'\n\n\nsplit_positions\nbool\nwhether the position column is split into x,y,z columns. Defaults to False.\nFalse"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_pre_post_statebuilder.html#returns",
    "href": "reference/statebuilder.helpers.make_pre_post_statebuilder.html#returns",
    "title": "statebuilder.helpers.make_pre_post_statebuilder",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\n\nAn instance of a ChainedStateBuilder configured to accept a list starting with None followed by optionally synapse input dataframe followed by optionally synapse output dataframe."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_point_statebuilder.html",
    "href": "reference/statebuilder.helpers.make_point_statebuilder.html",
    "title": "statebuilder.helpers.make_point_statebuilder",
    "section": "",
    "text": "statebuilder.helpers.make_point_statebuilder(client, point_column='pt_position', linked_seg_column='pt_root_id', data_resolution=None, group_column=None, tag_column=None, description_column=None, contrast=None, view_kws=None, point_layer_name='pts', color=None, split_positions=False)\nGenerate a state builder that puts points on a single column with a linked segmentaton id\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured for the datastack desired\nrequired\n\n\npoint_column\nstr\nColumn in dataframe to pull points from. Defaults to “pt_position”.\n'pt_position'\n\n\nlinked_seg_column\nstr\ncolumn to link to segmentation, None for no column. Defaults to “pt_root_id”.\n'pt_root_id'\n\n\ngroup_column\nstr, or list\ncolumn(s) to group annotations by, None for no grouping (default=None)\nNone\n\n\ntag_column\nstr, optional)\ncolumn to use for tags, None for no tags (default=None)\nNone\n\n\ndescription_column\nstr\ncolumn to use for descriptions, None for no descriptions (default=None)\nNone\n\n\ncontrast\nlist\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\nview_kws\ndict\ndictionary of view keywords to configure neuroglancer view\nNone\n\n\nsplit_positions\nbool\nwhether the position column into x,y,z columns. Defaults to False.\nFalse\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n\nA statebuilder to make points with linked segmentations"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_point_statebuilder.html#parameters",
    "href": "reference/statebuilder.helpers.make_point_statebuilder.html#parameters",
    "title": "statebuilder.helpers.make_point_statebuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured for the datastack desired\nrequired\n\n\npoint_column\nstr\nColumn in dataframe to pull points from. Defaults to “pt_position”.\n'pt_position'\n\n\nlinked_seg_column\nstr\ncolumn to link to segmentation, None for no column. Defaults to “pt_root_id”.\n'pt_root_id'\n\n\ngroup_column\nstr, or list\ncolumn(s) to group annotations by, None for no grouping (default=None)\nNone\n\n\ntag_column\nstr, optional)\ncolumn to use for tags, None for no tags (default=None)\nNone\n\n\ndescription_column\nstr\ncolumn to use for descriptions, None for no descriptions (default=None)\nNone\n\n\ncontrast\nlist\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\nview_kws\ndict\ndictionary of view keywords to configure neuroglancer view\nNone\n\n\nsplit_positions\nbool\nwhether the position column into x,y,z columns. Defaults to False.\nFalse"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_point_statebuilder.html#returns",
    "href": "reference/statebuilder.helpers.make_point_statebuilder.html#returns",
    "title": "statebuilder.helpers.make_point_statebuilder",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\n\nA statebuilder to make points with linked segmentations"
  },
  {
    "objectID": "reference/parser.base.annotation_layers.html",
    "href": "reference/parser.base.annotation_layers.html",
    "title": "parser.base.annotation_layers",
    "section": "",
    "text": "parser.base.annotation_layers(state)\nGet all annotation layer names in the state\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/parser.base.annotation_layers.html#parameters",
    "href": "reference/parser.base.annotation_layers.html#parameters",
    "title": "parser.base.annotation_layers",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired"
  },
  {
    "objectID": "reference/parser.base.annotation_layers.html#returns",
    "href": "reference/parser.base.annotation_layers.html#returns",
    "title": "parser.base.annotation_layers",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/layers.html",
    "href": "reference/layers.html",
    "title": "layers",
    "section": "",
    "text": "statebuilder.layers\n\n\n\n\n\nName\nDescription\n\n\n\n\nAnnotationLayerConfig\nConfiguration class for annotation layers\n\n\nImageLayerConfig\nImage layer configuration class.\n\n\nLayerConfigBase\nBase class for configuring layers\n\n\nSegmentationLayerConfig\nConfiguration class for segmentation layers\n\n\n\n\n\n\nstatebuilder.layers.AnnotationLayerConfig(self, name=None, color=None, linked_segmentation_layer=None, mapping_rules=[], array_data=False, tags=None, active=True, filter_by_segmentation=False, brackets_show_segmentation=True, selection_shows_segmentation=True, filter_query=None, data_resolution=None)\nConfiguration class for annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue\n\n\n\n\n\n\n\nstatebuilder.layers.ImageLayerConfig(self, source, name=None, active=False, contrast_controls=False, black=0.0, white=1.0)\nImage layer configuration class.\nThis provides the rules for setting up an image layer in neuroglancer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0\n\n\n\n\n\n\n\nstatebuilder.layers.LayerConfigBase(self, name, type, source, color, active)\nBase class for configuring layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name for reference and display\nrequired\n\n\ntype\nstr\nLayer type. Usually handled by the subclass\nrequired\n\n\nsource\nstr\nDatasource for the layer\nrequired\n\n\ncolor\nstr\nHex string (with starting hash).\nrequired\n\n\nactive\n(bool)\nIf True, becomes a selected layer.\nrequired\n\n\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig(self, source, name=None, selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None, active=False, alpha_selected=0.3, alpha_3d=1, alpha_unselected=0, split_point_map=None, view_kws=None, timestamp=None, data_resolution=None)\nConfiguration class for segmentation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/layers.html#classes",
    "href": "reference/layers.html#classes",
    "title": "layers",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nAnnotationLayerConfig\nConfiguration class for annotation layers\n\n\nImageLayerConfig\nImage layer configuration class.\n\n\nLayerConfigBase\nBase class for configuring layers\n\n\nSegmentationLayerConfig\nConfiguration class for segmentation layers"
  },
  {
    "objectID": "reference/layers.html#nglui.statebuilder.layers.AnnotationLayerConfig",
    "href": "reference/layers.html#nglui.statebuilder.layers.AnnotationLayerConfig",
    "title": "layers",
    "section": "",
    "text": "statebuilder.layers.AnnotationLayerConfig(self, name=None, color=None, linked_segmentation_layer=None, mapping_rules=[], array_data=False, tags=None, active=True, filter_by_segmentation=False, brackets_show_segmentation=True, selection_shows_segmentation=True, filter_query=None, data_resolution=None)\nConfiguration class for annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/layers.html#nglui.statebuilder.layers.ImageLayerConfig",
    "href": "reference/layers.html#nglui.statebuilder.layers.ImageLayerConfig",
    "title": "layers",
    "section": "",
    "text": "statebuilder.layers.ImageLayerConfig(self, source, name=None, active=False, contrast_controls=False, black=0.0, white=1.0)\nImage layer configuration class.\nThis provides the rules for setting up an image layer in neuroglancer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/layers.html#nglui.statebuilder.layers.LayerConfigBase",
    "href": "reference/layers.html#nglui.statebuilder.layers.LayerConfigBase",
    "title": "layers",
    "section": "",
    "text": "statebuilder.layers.LayerConfigBase(self, name, type, source, color, active)\nBase class for configuring layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name for reference and display\nrequired\n\n\ntype\nstr\nLayer type. Usually handled by the subclass\nrequired\n\n\nsource\nstr\nDatasource for the layer\nrequired\n\n\ncolor\nstr\nHex string (with starting hash).\nrequired\n\n\nactive\n(bool)\nIf True, becomes a selected layer.\nrequired"
  },
  {
    "objectID": "reference/layers.html#nglui.statebuilder.layers.SegmentationLayerConfig",
    "href": "reference/layers.html#nglui.statebuilder.layers.SegmentationLayerConfig",
    "title": "layers",
    "section": "",
    "text": "statebuilder.layers.SegmentationLayerConfig(self, source, name=None, selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None, active=False, alpha_selected=0.3, alpha_3d=1, alpha_unselected=0, split_point_map=None, view_kws=None, timestamp=None, data_resolution=None)\nConfiguration class for segmentation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/preview.html",
    "href": "reference/preview.html",
    "title": "preview",
    "section": "",
    "text": "preview(ast, max_depth=999, compact=False, as_string=False)\nPrint a friendly representation of a griffe object (e.g. function, docstring)\n\n\n&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n ...\n&gt;&gt;&gt; preview(obj)\n ..."
  },
  {
    "objectID": "reference/preview.html#examples",
    "href": "reference/preview.html#examples",
    "title": "preview",
    "section": "",
    "text": "&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n ...\n&gt;&gt;&gt; preview(obj)\n ..."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html",
    "href": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html",
    "title": "statebuilder.helpers.make_neuron_neuroglancer_link",
    "section": "",
    "text": "statebuilder.helpers.make_neuron_neuroglancer_link(client, root_ids, return_as='html', shorten='always', show_inputs=False, show_outputs=False, sort_inputs=True, sort_outputs=True, sort_ascending=False, input_color=DEFAULT_POSTSYN_COLOR, output_color=DEFAULT_PRESYN_COLOR, contrast=None, timestamp=None, view_kws=None, point_column='ctr_pt_position', pre_pt_root_id_col='pre_pt_root_id', post_pt_root_id_col='post_pt_root_id', input_layer_name='syns_in', output_layer_name='syns_out', ngl_url=None, link_text='Neuroglancer Link', target_site=None)\nfunction to create a neuroglancer link view of a neuron, optionally including inputs and outputs\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\nA CAVEclient configured for the datastack to visualize.\nrequired\n\n\nroot_ids\ntyping.Iterable[int]\nThe root_ids to build the visualization around.\nrequired\n\n\nreturn_as\nstr\nHow to return the URL or state. Valid options are: - ‘html’: Returns an IPython HTML element. - ‘json’: Returns a dictionary representing the Neuroglancer state. - ‘url’: Returns a URL string. Defaults to ‘html’.\n'html'\n\n\nshorten\nstr\nWhether to shorten the link. Valid options are: - ‘always’: Always shorten the link. - ‘if_long’: Shorten the link if it exceeds MAX_URL_LENGTH. - ‘never’: Never shorten the link. Defaults to ‘if_long’.\n'always'\n\n\nshow_inputs\nbool\nWhether to include input synapses. Defaults to False.\nFalse\n\n\nshow_outputs\nbool\nWhether to include output synapses. Defaults to False.\nFalse\n\n\nsort_inputs\nbool\nWhether to sort input synapses by presynaptic root id, ordered by synapse count. Defaults to True.\nTrue\n\n\nsort_outputs\nbool\nWhether to sort output synapses by presynaptic root id, ordered by postsynaptic synapse count. Defaults to True.\nTrue\n\n\nsort_ascending\nbool\nIf sorting, whether to sort ascending (lowest synapse count to highest). Defaults to False.\nFalse\n\n\ninput_color\nlist(float) or str\nColor of input synapse points as an RGB list [0, 1], hex string, or common name.\nDEFAULT_POSTSYN_COLOR\n\n\noutput_color\nlist(float) or str\nColor of output synapse points as an RGB list [0, 1], hex string, or common name.\nDEFAULT_PRESYN_COLOR\n\n\ncontrast\nlist\nList of two floats between 0 and 1, specifying the black and white levels. If None, no contrast is set.\nNone\n\n\ntimestamp\ndatetime.datetime.datetime\nTimestamp to use for the query. Defaults to None, which will use the materialized version.\nNone\n\n\nview_kws\ndict\nDictionary containing viewer settings for Neuroglancer. See nglui.StateBuilder for options. See the previous docstring for details on available keys.\nNone\n\n\npoint_column\nstr\nColumn to pull synapse positions from. Defaults to “ctr_pt_position”.\n'ctr_pt_position'\n\n\npre_pt_root_id_col\nstr\nColumn to pull presynaptic IDs for synapses from. Defaults to “pre_pt_root_id”.\n'pre_pt_root_id'\n\n\npost_pt_root_id_col\nstr\nColumn to pull postsynaptic IDs for synapses from. Defaults to “post_pt_root_id”.\n'post_pt_root_id'\n\n\ninput_layer_name\nstr\nName of the layer for input synapses. Defaults to “syns_in”.\n'syns_in'\n\n\noutput_layer_name\nstr\nName of the layer for output synapses. Defaults to “syns_out”.\n'syns_out'\n\n\nngl_url\nstr\nURL of the Neuroglancer instance to use. Defaults to the default viewer set in the datastack.\nNone\n\n\nlink_text\nstr\nText to use for the HTML return. Defaults to ‘Neuroglancer Link’.\n'Neuroglancer Link'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf the specified point column is not present in the synapse table.\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nIPython.HTML, str, or dict\nRepresentation of the Neuroglancer state, depending on the return_as parameter."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html#parameters",
    "href": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html#parameters",
    "title": "statebuilder.helpers.make_neuron_neuroglancer_link",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.CAVEclient\nA CAVEclient configured for the datastack to visualize.\nrequired\n\n\nroot_ids\ntyping.Iterable[int]\nThe root_ids to build the visualization around.\nrequired\n\n\nreturn_as\nstr\nHow to return the URL or state. Valid options are: - ‘html’: Returns an IPython HTML element. - ‘json’: Returns a dictionary representing the Neuroglancer state. - ‘url’: Returns a URL string. Defaults to ‘html’.\n'html'\n\n\nshorten\nstr\nWhether to shorten the link. Valid options are: - ‘always’: Always shorten the link. - ‘if_long’: Shorten the link if it exceeds MAX_URL_LENGTH. - ‘never’: Never shorten the link. Defaults to ‘if_long’.\n'always'\n\n\nshow_inputs\nbool\nWhether to include input synapses. Defaults to False.\nFalse\n\n\nshow_outputs\nbool\nWhether to include output synapses. Defaults to False.\nFalse\n\n\nsort_inputs\nbool\nWhether to sort input synapses by presynaptic root id, ordered by synapse count. Defaults to True.\nTrue\n\n\nsort_outputs\nbool\nWhether to sort output synapses by presynaptic root id, ordered by postsynaptic synapse count. Defaults to True.\nTrue\n\n\nsort_ascending\nbool\nIf sorting, whether to sort ascending (lowest synapse count to highest). Defaults to False.\nFalse\n\n\ninput_color\nlist(float) or str\nColor of input synapse points as an RGB list [0, 1], hex string, or common name.\nDEFAULT_POSTSYN_COLOR\n\n\noutput_color\nlist(float) or str\nColor of output synapse points as an RGB list [0, 1], hex string, or common name.\nDEFAULT_PRESYN_COLOR\n\n\ncontrast\nlist\nList of two floats between 0 and 1, specifying the black and white levels. If None, no contrast is set.\nNone\n\n\ntimestamp\ndatetime.datetime.datetime\nTimestamp to use for the query. Defaults to None, which will use the materialized version.\nNone\n\n\nview_kws\ndict\nDictionary containing viewer settings for Neuroglancer. See nglui.StateBuilder for options. See the previous docstring for details on available keys.\nNone\n\n\npoint_column\nstr\nColumn to pull synapse positions from. Defaults to “ctr_pt_position”.\n'ctr_pt_position'\n\n\npre_pt_root_id_col\nstr\nColumn to pull presynaptic IDs for synapses from. Defaults to “pre_pt_root_id”.\n'pre_pt_root_id'\n\n\npost_pt_root_id_col\nstr\nColumn to pull postsynaptic IDs for synapses from. Defaults to “post_pt_root_id”.\n'post_pt_root_id'\n\n\ninput_layer_name\nstr\nName of the layer for input synapses. Defaults to “syns_in”.\n'syns_in'\n\n\noutput_layer_name\nstr\nName of the layer for output synapses. Defaults to “syns_out”.\n'syns_out'\n\n\nngl_url\nstr\nURL of the Neuroglancer instance to use. Defaults to the default viewer set in the datastack.\nNone\n\n\nlink_text\nstr\nText to use for the HTML return. Defaults to ‘Neuroglancer Link’.\n'Neuroglancer Link'"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html#raises",
    "href": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html#raises",
    "title": "statebuilder.helpers.make_neuron_neuroglancer_link",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nValueError\nIf the specified point column is not present in the synapse table."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html#returns",
    "href": "reference/statebuilder.helpers.make_neuron_neuroglancer_link.html#returns",
    "title": "statebuilder.helpers.make_neuron_neuroglancer_link",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nIPython.HTML, str, or dict\nRepresentation of the Neuroglancer state, depending on the return_as parameter."
  },
  {
    "objectID": "reference/layers.ImageLayerConfig.html",
    "href": "reference/layers.ImageLayerConfig.html",
    "title": "layers.ImageLayerConfig",
    "section": "",
    "text": "statebuilder.layers.ImageLayerConfig(self, source, name=None, active=False, contrast_controls=False, black=0.0, white=1.0)\nImage layer configuration class.\nThis provides the rules for setting up an image layer in neuroglancer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/layers.ImageLayerConfig.html#parameters",
    "href": "reference/layers.ImageLayerConfig.html#parameters",
    "title": "layers.ImageLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/parser.base.image_layers.html",
    "href": "reference/parser.base.image_layers.html",
    "title": "parser.base.image_layers",
    "section": "",
    "text": "parser.base.image_layers(state)\nGet all image layer names in the state\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/parser.base.image_layers.html#parameters",
    "href": "reference/parser.base.image_layers.html#parameters",
    "title": "parser.base.image_layers",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as a JSON dict\nrequired"
  },
  {
    "objectID": "reference/parser.base.image_layers.html#returns",
    "href": "reference/parser.base.image_layers.html#returns",
    "title": "parser.base.image_layers",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of layer names"
  },
  {
    "objectID": "reference/nglui.statebuilder.statebuilder.StateBuilder.render_state.html",
    "href": "reference/nglui.statebuilder.statebuilder.StateBuilder.render_state.html",
    "title": "render_state",
    "section": "",
    "text": "statebuilder.statebuilder.StateBuilder.render_state(data=None, base_state=None, return_as='url', url_prefix=None, link_text='Neuroglancer Link', target_site=None)\nBuild a Neuroglancer state out of a DataFrame.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nDataFrame to use as a point source. By default None, for which it will return only the base_state and any fixed values.\nNone\n\n\nbase_state\ndict\nInitial state to build on, expressed as Neuroglancer JSON. By default None\nNone\n\n\nreturn_as\n[url, nglui.statebuilder.statebuilder.StateBuilder.viewer, html, json, dict, shared]\nChoice of output types. Note that if a viewer is returned, the state is not reset. url : Returns the raw url describing the state viewer : Returns an EasyViewer object holding the state information html : Returns an HTML link to the url, useful for notebooks. json : Returns a JSON string describing the state. dict : Returns a dict version of the JSON state. By default ‘url’\n'url'\n\n\nurl_prefix\nstr\nNeuroglancer URL prefix to use. By default None, for which it will open with the class default.\nNone\n\n\nlink_text\nstr\nText to use for the link when returning as html, by default ‘Neuroglancer Link’\n'Neuroglancer Link'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstring or neuroglancer.neuroglancer.Viewer\nA link to or viewer for a Neuroglancer state with layers, annotations, and selected objects determined by the data."
  },
  {
    "objectID": "reference/nglui.statebuilder.statebuilder.StateBuilder.render_state.html#parameters",
    "href": "reference/nglui.statebuilder.statebuilder.StateBuilder.render_state.html#parameters",
    "title": "render_state",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nDataFrame to use as a point source. By default None, for which it will return only the base_state and any fixed values.\nNone\n\n\nbase_state\ndict\nInitial state to build on, expressed as Neuroglancer JSON. By default None\nNone\n\n\nreturn_as\n[url, nglui.statebuilder.statebuilder.StateBuilder.viewer, html, json, dict, shared]\nChoice of output types. Note that if a viewer is returned, the state is not reset. url : Returns the raw url describing the state viewer : Returns an EasyViewer object holding the state information html : Returns an HTML link to the url, useful for notebooks. json : Returns a JSON string describing the state. dict : Returns a dict version of the JSON state. By default ‘url’\n'url'\n\n\nurl_prefix\nstr\nNeuroglancer URL prefix to use. By default None, for which it will open with the class default.\nNone\n\n\nlink_text\nstr\nText to use for the link when returning as html, by default ‘Neuroglancer Link’\n'Neuroglancer Link'"
  },
  {
    "objectID": "reference/nglui.statebuilder.statebuilder.StateBuilder.render_state.html#returns",
    "href": "reference/nglui.statebuilder.statebuilder.StateBuilder.render_state.html#returns",
    "title": "render_state",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstring or neuroglancer.neuroglancer.Viewer\nA link to or viewer for a Neuroglancer state with layers, annotations, and selected objects determined by the data."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_url_robust.html",
    "href": "reference/statebuilder.helpers.make_url_robust.html",
    "title": "statebuilder.helpers.make_url_robust",
    "section": "",
    "text": "statebuilder.helpers.make_url_robust(df, sb, client, shorten='if_long', ngl_url=None, max_url_length=MAX_URL_LENGTH, target_site=None)\nGenerate a url from a neuroglancer state. If too long, return through state server, othewise return a url containing the data directly.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\nDataframe to pass through statebuilder\nrequired\n\n\nsb\nnglui.statebuilder.statebuilder.nglui.statebuilder.statebuilder.StateBuilder\nStatebuilder to use to render data for link\nrequired\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured with a state server\nrequired\n\n\nshorten\nstr\nHow to shorten link. one of ‘if_long’, ‘always’, ‘never’. ‘if_long’ will use the state server to shorten links longer than nglui.statebuilder.MAX_URL_LENGTH (set to 1,750,000). ‘always’ will always use the state server to shorten the url ‘never’ will always return the full url. Defaults to “if_long”.\n'if_long'\n\n\nngl_url\nstr\nNeuroglancer deployment URL, by default None\nNone\n\n\nmax_url_length\nint\nMaximum length of url to return directly, by default 1_750_000\nMAX_URL_LENGTH\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr\nURL containing the state created by the statebuilder."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_url_robust.html#parameters",
    "href": "reference/statebuilder.helpers.make_url_robust.html#parameters",
    "title": "statebuilder.helpers.make_url_robust",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\nDataframe to pass through statebuilder\nrequired\n\n\nsb\nnglui.statebuilder.statebuilder.nglui.statebuilder.statebuilder.StateBuilder\nStatebuilder to use to render data for link\nrequired\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured with a state server\nrequired\n\n\nshorten\nstr\nHow to shorten link. one of ‘if_long’, ‘always’, ‘never’. ‘if_long’ will use the state server to shorten links longer than nglui.statebuilder.MAX_URL_LENGTH (set to 1,750,000). ‘always’ will always use the state server to shorten the url ‘never’ will always return the full url. Defaults to “if_long”.\n'if_long'\n\n\nngl_url\nstr\nNeuroglancer deployment URL, by default None\nNone\n\n\nmax_url_length\nint\nMaximum length of url to return directly, by default 1_750_000\nMAX_URL_LENGTH\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_url_robust.html#returns",
    "href": "reference/statebuilder.helpers.make_url_robust.html#returns",
    "title": "statebuilder.helpers.make_url_robust",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstr\nURL containing the state created by the statebuilder."
  },
  {
    "objectID": "reference/get_object.html",
    "href": "reference/get_object.html",
    "title": "get_object",
    "section": "",
    "text": "get_object(path, object_name=None, parser='numpy', load_aliases=True, dynamic=False, loader=None)\nFetch a griffe object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n‘str | None’\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse\n\n\n\n\n\n\npreview: print a user-friendly preview of a griffe object.\n\n\n\n&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ...\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngriffe.dataclasses.griffe.dataclasses.Object\nabc"
  },
  {
    "objectID": "reference/get_object.html#parameters",
    "href": "reference/get_object.html#parameters",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n‘str | None’\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse"
  },
  {
    "objectID": "reference/get_object.html#see-also",
    "href": "reference/get_object.html#see-also",
    "title": "get_object",
    "section": "",
    "text": "preview: print a user-friendly preview of a griffe object."
  },
  {
    "objectID": "reference/get_object.html#examples",
    "href": "reference/get_object.html#examples",
    "title": "get_object",
    "section": "",
    "text": "&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ..."
  },
  {
    "objectID": "reference/get_object.html#returns",
    "href": "reference/get_object.html#returns",
    "title": "get_object",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\ngriffe.dataclasses.griffe.dataclasses.Object\nabc"
  },
  {
    "objectID": "reference/statebuilder.helpers.from_client.html",
    "href": "reference/statebuilder.helpers.from_client.html",
    "title": "statebuilder.helpers.from_client",
    "section": "",
    "text": "statebuilder.helpers.from_client(client, image_name=None, segmentation_name=None, contrast=None)\nGenerate basic image and segmentation layers from a FrameworkClient\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.caveclient.CAVEclient\nA CAVEclient with a specified datastack\nrequired\n\n\nimage_name\nstr\nName for the image layer, by default None.\nNone\n\n\nsegmentation_name\nstr\nName for the segmentation layer, by default None\nNone\n\n\ncontrast\nlist - like\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnglui.statebuilder.layers.ImageLayerConfig\nImage layer with default values from the client\n\n\nnglui.statebuilder.layers.ImageLayerConfig\nSegmentation layer with default values from the client"
  },
  {
    "objectID": "reference/statebuilder.helpers.from_client.html#parameters",
    "href": "reference/statebuilder.helpers.from_client.html#parameters",
    "title": "statebuilder.helpers.from_client",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nclient\ncaveclient.caveclient.CAVEclient\nA CAVEclient with a specified datastack\nrequired\n\n\nimage_name\nstr\nName for the image layer, by default None.\nNone\n\n\nsegmentation_name\nstr\nName for the segmentation layer, by default None\nNone\n\n\ncontrast\nlist - like\nTwo elements specifying the black level and white level as floats between 0 and 1, by default None. If None, no contrast is set.\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.from_client.html#returns",
    "href": "reference/statebuilder.helpers.from_client.html#returns",
    "title": "statebuilder.helpers.from_client",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nnglui.statebuilder.layers.ImageLayerConfig\nImage layer with default values from the client\n\n\nnglui.statebuilder.layers.ImageLayerConfig\nSegmentation layer with default values from the client"
  },
  {
    "objectID": "reference/ImageLayerConfig.html",
    "href": "reference/ImageLayerConfig.html",
    "title": "ImageLayerConfig",
    "section": "",
    "text": "statebuilder.layers.ImageLayerConfig(self, source, name=None, active=False, contrast_controls=False, black=0.0, white=1.0)\nImage layer configuration class.\nThis provides the rules for setting up an image layer in neuroglancer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/ImageLayerConfig.html#parameters",
    "href": "reference/ImageLayerConfig.html#parameters",
    "title": "ImageLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/statebuilder.SphereMapper.html",
    "href": "reference/statebuilder.SphereMapper.html",
    "title": "statebuilder.SphereMapper",
    "section": "",
    "text": "statebuilder.SphereMapper(self, center_column=None, radius_column=None, description_column=None, linked_segmentation_column=None, tag_column=None, group_column=None, gather_linked_segmentations=True, share_linked_segmentations=False, z_multiplier=0.1, set_position=True, multipoint=False, collapse_groups=False, split_positions=False, mapping_set=None)\nSets rules to map dataframes to sphere annotations\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ncenter_column\nstr\nColumn name with 3d position data for the center of the sphere\nNone\n\n\nradius_column\nstr\nColumn name with a radius for the sphere (in nm)\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data.\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Each point row must have the same number of points. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf set, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/statebuilder.SphereMapper.html#parameters",
    "href": "reference/statebuilder.SphereMapper.html#parameters",
    "title": "statebuilder.SphereMapper",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ncenter_column\nstr\nColumn name with 3d position data for the center of the sphere\nNone\n\n\nradius_column\nstr\nColumn name with a radius for the sphere (in nm)\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data.\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Each point row must have the same number of points. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf set, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/statebuilder.ImageLayerConfig.html",
    "href": "reference/statebuilder.ImageLayerConfig.html",
    "title": "statebuilder.ImageLayerConfig",
    "section": "",
    "text": "statebuilder.ImageLayerConfig(self, source, name=None, active=False, contrast_controls=False, black=0.0, white=1.0)\nImage layer configuration class.\nThis provides the rules for setting up an image layer in neuroglancer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/statebuilder.ImageLayerConfig.html#parameters",
    "href": "reference/statebuilder.ImageLayerConfig.html#parameters",
    "title": "statebuilder.ImageLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nCloudpath to an image source\nrequired\n\n\nname\nstr\nName of the image layer. By default, ‘img’.\nNone\n\n\nactive\nbool\nIf True, makes the layer active in neuroglancer. Default is False.\nFalse\n\n\ncontrast_controls\nbool\nIf True, gives the layer a user-controllable brightness and contrast shader. Default is False.\nFalse\n\n\nblack\nfloat\nIf contrast_controls is True, sets the default black level. Default is 0.0.\n0.0\n\n\nwhite\nfloat\nIf contrast_controls is True, sets the default white level. Default is 1.0.\n1.0"
  },
  {
    "objectID": "reference/statebuilder.StateBuilder.html",
    "href": "reference/statebuilder.StateBuilder.html",
    "title": "statebuilder.StateBuilder",
    "section": "",
    "text": "statebuilder.StateBuilder(self, layers=[], base_state=None, url_prefix=None, state_server=None, resolution=None, view_kws={}, client=None, target_site=None)\nA class for schematic mapping data frames into neuroglancer states.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nlayers\n\n\n[]\n\n\nbase_state\n\n\nNone\n\n\nurl_prefix\n\nDefaults to None, which will use https://neuromancer-seung-import.appspot.com\nNone\n\n\nstate_server\n\n\nNone\n\n\nresolution\n\n\nNone\n\n\nview_kws\n\nkeys are: show_slices: Boolean sets if slices are shown in the 3d view. Defaults to False. layout: str xy-3d/xz-3d/yz-3d (sections plus 3d pane), xy/yz/xz/3d (only one pane), or 4panel (all panes). Default is xy-3d. show_axis_lines: Boolean determines if the axis lines are shown in the middle of each view. show_scale_bar: Boolean toggles showing the scale bar. orthographic : Boolean toggles orthographic view in the 3d pane. position* : 3-element vector determines the centered location. zoom_image : float Zoom level for the imagery in units of nm per voxel. Defaults to 8. zoom_3d : float Zoom level for the 3d pane. Defaults to 2000. Smaller numbers are more zoomed in. background_color : str or list Sets the background color of the 3d view. Arguments can be rgb values, hex colors, or named web colors. Defaults to black.\n{}\n\n\nclient\n\n\nNone"
  },
  {
    "objectID": "reference/statebuilder.StateBuilder.html#parameters",
    "href": "reference/statebuilder.StateBuilder.html#parameters",
    "title": "statebuilder.StateBuilder",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nlayers\n\n\n[]\n\n\nbase_state\n\n\nNone\n\n\nurl_prefix\n\nDefaults to None, which will use https://neuromancer-seung-import.appspot.com\nNone\n\n\nstate_server\n\n\nNone\n\n\nresolution\n\n\nNone\n\n\nview_kws\n\nkeys are: show_slices: Boolean sets if slices are shown in the 3d view. Defaults to False. layout: str xy-3d/xz-3d/yz-3d (sections plus 3d pane), xy/yz/xz/3d (only one pane), or 4panel (all panes). Default is xy-3d. show_axis_lines: Boolean determines if the axis lines are shown in the middle of each view. show_scale_bar: Boolean toggles showing the scale bar. orthographic : Boolean toggles orthographic view in the 3d pane. position* : 3-element vector determines the centered location. zoom_image : float Zoom level for the imagery in units of nm per voxel. Defaults to 8. zoom_3d : float Zoom level for the 3d pane. Defaults to 2000. Smaller numbers are more zoomed in. background_color : str or list Sets the background color of the 3d view. Arguments can be rgb values, hex colors, or named web colors. Defaults to black.\n{}\n\n\nclient\n\n\nNone"
  },
  {
    "objectID": "reference/layers.AnnotationLayerConfig.html",
    "href": "reference/layers.AnnotationLayerConfig.html",
    "title": "layers.AnnotationLayerConfig",
    "section": "",
    "text": "statebuilder.layers.AnnotationLayerConfig(self, name=None, color=None, linked_segmentation_layer=None, mapping_rules=[], array_data=False, tags=None, active=True, filter_by_segmentation=False, brackets_show_segmentation=True, selection_shows_segmentation=True, filter_query=None, data_resolution=None)\nConfiguration class for annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/layers.AnnotationLayerConfig.html#parameters",
    "href": "reference/layers.AnnotationLayerConfig.html#parameters",
    "title": "layers.AnnotationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/parser.base.tag_dictionary.html",
    "href": "reference/parser.base.tag_dictionary.html",
    "title": "parser.base.tag_dictionary",
    "section": "",
    "text": "parser.base.tag_dictionary(state, layer_name)\nGet the tag id to string dictionary for a layer\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\n\nrequired\n\n\nlayer_name\n[type]\n[description]\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\n[type]\n[description]"
  },
  {
    "objectID": "reference/parser.base.tag_dictionary.html#parameters",
    "href": "reference/parser.base.tag_dictionary.html#parameters",
    "title": "parser.base.tag_dictionary",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\n\nrequired\n\n\nlayer_name\n[type]\n[description]\nrequired"
  },
  {
    "objectID": "reference/parser.base.tag_dictionary.html#returns",
    "href": "reference/parser.base.tag_dictionary.html#returns",
    "title": "parser.base.tag_dictionary",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\n[type]\n[description]"
  },
  {
    "objectID": "reference/statebuilder.SegmentationLayerConfig.html",
    "href": "reference/statebuilder.SegmentationLayerConfig.html",
    "title": "statebuilder.SegmentationLayerConfig",
    "section": "",
    "text": "statebuilder.SegmentationLayerConfig(self, source, name=None, selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None, active=False, alpha_selected=0.3, alpha_3d=1, alpha_unselected=0, split_point_map=None, view_kws=None, timestamp=None, data_resolution=None)\nConfiguration class for segmentation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone"
  },
  {
    "objectID": "reference/statebuilder.SegmentationLayerConfig.html#parameters",
    "href": "reference/statebuilder.SegmentationLayerConfig.html#parameters",
    "title": "statebuilder.SegmentationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.AnnotationLayerConfig.html",
    "href": "reference/nglui.statebuilder.layers.AnnotationLayerConfig.html",
    "title": "AnnotationLayerConfig",
    "section": "",
    "text": "statebuilder.layers.AnnotationLayerConfig(self, name=None, color=None, linked_segmentation_layer=None, mapping_rules=[], array_data=False, tags=None, active=True, filter_by_segmentation=False, brackets_show_segmentation=True, selection_shows_segmentation=True, filter_query=None, data_resolution=None)\nConfiguration class for annotation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/nglui.statebuilder.layers.AnnotationLayerConfig.html#parameters",
    "href": "reference/nglui.statebuilder.layers.AnnotationLayerConfig.html#parameters",
    "title": "AnnotationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nstr\nLayer name. By default, ‘annos’\nNone\n\n\ncolor\nstr\nHex color code with an initial #. By default, None\nNone\n\n\nlinked_segmentation_layer\nstr\nName of a linked segmentation layer for selected ids. By default, None\nNone\n\n\nmapping_rules\n(nglui.statebuilder.mappers.PointMapper, nglui.statebuilder.mappers.LineMapper, nglui.statebuilder.mappers.SphereMapper or list)\nOne rule or a list of rules mapping data to annotations. By default, []\n[]\n\n\narray_data\nbool\nIf True, allows simple mapping where one or more arrays are passed instead of a dataframe. Only allows basic annotation creation, no tags, linked segmentations, or other rich features.\nFalse\n\n\ntags\nlist\nList of tags for the layer.\nNone\n\n\nactive\nbool\nIf True, makes the layer selected. Default is True (unlike for image/segmentation layers).\nTrue"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_state_url.html",
    "href": "reference/statebuilder.helpers.make_state_url.html",
    "title": "statebuilder.helpers.make_state_url",
    "section": "",
    "text": "statebuilder.helpers.make_state_url(df, sb, client, ngl_url=None, target_site=None)\nGenerate a url from a neuroglancer state via a state server.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\nDataframe to pass through statebuilder\nrequired\n\n\nsb\nnglui.statebuilder.statebuilder.nglui.statebuilder.statebuilder.StateBuilder\nStatebuilder to use to render data for link\nrequired\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured with a state server\nrequired\n\n\nngl_url\nstr\nNeuroglancer deployment URL, by default None\nNone\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nstr\nUrl to the uploaded neuroglancer state."
  },
  {
    "objectID": "reference/statebuilder.helpers.make_state_url.html#parameters",
    "href": "reference/statebuilder.helpers.make_state_url.html#parameters",
    "title": "statebuilder.helpers.make_state_url",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndf\npandas.pandas.DataFrame\nDataframe to pass through statebuilder\nrequired\n\n\nsb\nnglui.statebuilder.statebuilder.nglui.statebuilder.statebuilder.StateBuilder\nStatebuilder to use to render data for link\nrequired\n\n\nclient\ncaveclient.CAVEclient\nCAVEclient configured with a state server\nrequired\n\n\nngl_url\nstr\nNeuroglancer deployment URL, by default None\nNone\n\n\ntarget_site\nstr\nType of neuroglancer deployment to build link for, by default None. This value overrides automatic checking based on the provided url. Use seunglab for a Seung-lab branch and either mainline or cave-explorer for the Cave Explorer or main Google branch.\nNone"
  },
  {
    "objectID": "reference/statebuilder.helpers.make_state_url.html#returns",
    "href": "reference/statebuilder.helpers.make_state_url.html#returns",
    "title": "statebuilder.helpers.make_state_url",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nstr\nUrl to the uploaded neuroglancer state."
  },
  {
    "objectID": "reference/statebuilder.BoundingBoxMapper.html",
    "href": "reference/statebuilder.BoundingBoxMapper.html",
    "title": "statebuilder.BoundingBoxMapper",
    "section": "",
    "text": "statebuilder.BoundingBoxMapper(self, point_column_a=None, point_column_b=None, description_column=None, linked_segmentation_column=None, tag_column=None, group_column=None, gather_linked_segmentations=True, share_linked_segmentations=False, set_position=True, multipoint=False, collapse_groups=False, split_positions=False, mapping_set=None)\nSets rules to map dataframes to bounding box annotations\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npoint_column_a\nstr\nColumn name with 3d position data for the first point of the bounding box. Must be set if array_data is False (the default)\nNone\n\n\npoint_column_b\nstr\nColumn name with 3d position data for the second point of the bounding box. Must be set if array_data is False (the default)\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data (using point_column_a).\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Each point row must have the same number of points. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf set, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/statebuilder.BoundingBoxMapper.html#parameters",
    "href": "reference/statebuilder.BoundingBoxMapper.html#parameters",
    "title": "statebuilder.BoundingBoxMapper",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npoint_column_a\nstr\nColumn name with 3d position data for the first point of the bounding box. Must be set if array_data is False (the default)\nNone\n\n\npoint_column_b\nstr\nColumn name with 3d position data for the second point of the bounding box. Must be set if array_data is False (the default)\nNone\n\n\ndescription_column\nstr\nColumn name with string data for annotation descriptions\nNone\n\n\nlinked_segmentation_column\nstr\nColumn name for root ids to link to annotations\nNone\n\n\ntag_column\nstr\nColumn name for categorical tag data. Tags must match those set in the annotation layer.\nNone\n\n\ngroup_column\nstr\nColumn name for grouping data. Data in this row should be numeric with possible NaNs. Rows with the same non-NaN value will be collected into a grouped annotation.\nNone\n\n\nset_position\nbool\nIf set to True, moves the position to center on the first point in the data (using point_column_a).\nTrue\n\n\nmultipoint\n\nIf True, permits multiple points in a given row, sharing data in other columns. Each point row must have the same number of points. Default is False.\nFalse\n\n\ncollapse_groups\n\nIf True, groups are toggled closed in the annotation view.\nFalse\n\n\nmapping_set\n\nIf set, assumes data is passed as a dictionary and uses this string to as the key for the data to use.\nNone"
  },
  {
    "objectID": "reference/layers.SegmentationLayerConfig.html",
    "href": "reference/layers.SegmentationLayerConfig.html",
    "title": "layers.SegmentationLayerConfig",
    "section": "",
    "text": "statebuilder.layers.SegmentationLayerConfig(self, source, name=None, selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None, active=False, alpha_selected=0.3, alpha_3d=1, alpha_unselected=0, split_point_map=None, view_kws=None, timestamp=None, data_resolution=None)\nConfiguration class for segmentation layers\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/layers.SegmentationLayerConfig.html#parameters",
    "href": "reference/layers.SegmentationLayerConfig.html#parameters",
    "title": "layers.SegmentationLayerConfig",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nsource\nstr\nSegmentation source\nrequired\n\n\nname\n(str, optional)\nLayer name.\nNone\n\n\nselected_ids_column\nstr or list-like, optional.\nColumn name (or list of column names) to use for selected ids.\nNone\n\n\nfixed_ids\nlist-like, optional.\nList of root ids to select directly.\nNone\n\n\nfixed_id_colors\nlist-like, optional.\nList of colors for fixed ids. Should be the same length as fixed_ids, although null entries can be padded with None values.\nNone\n\n\ncolor_column\nstr, optional.\n# at the begining. Column to use for color values for selected objects. Values should be RGB hex strings with a\nNone\n\n\nactive\nbool, optional.\nIf True, makes the layer selected. Default is False.\nFalse\n\n\nalpha_selected\n\nOpacity of selected segmentations in the image layer. Optional, default is 0.3.\n0.3\n\n\nalpha_3d\n\nOpacity of meshes. Optional, default is 1.\n1\n\n\nalpha_unselected\n\nOpacity of unselected segments. Optional, default is 0.\n0\n\n\nsplit_point_map\n\nIf not None, provides an object to map the dataframe input to multicut points. Default is None.\nNone\n\n\nview_kws\ndict, optional.\nKeyword arguments for viewer.set_segmentation_view_options. Sets selected (and unselected) segmetation alpha values. Defaults to values in DEFAULT_SEGMENTATION_VIEW_KWS dict specified in this module.\nNone\n\n\ntimestamp\nfloat or datetime, optional.\nTimestamp at which to fix the chunkedgraph in either unix epoch or datetime format. Optional, default is None.\nNone"
  },
  {
    "objectID": "reference/layers.SegmentationLayerConfig.html#methods",
    "href": "reference/layers.SegmentationLayerConfig.html#methods",
    "title": "layers.SegmentationLayerConfig",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_selection_map\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\nstatebuilder.layers.SegmentationLayerConfig.add_selection_map(selected_ids_column=None, fixed_ids=None, fixed_id_colors=None, color_column=None)\nAdd rules for selecting active segment ids and their colors\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nselected_ids_column\nstr\nDataframe column to use for adding selected segment ids to the segmentation layer, by default None\nNone\n\n\nfixed_ids\nint or list\nAdd one or more segment ids to be active, independent of the data, by default None\nNone\n\n\nfixed_id_colors\nlist\nAdd a list of colors (hex, rgb, or CSS3 string) to assign to the fixed ids, by default None\nNone\n\n\ncolor_column\nstr\nDataframe column to use for adding selected segment colors, by default None\nNone"
  },
  {
    "objectID": "reference/parser.base.sphere_annotations.html",
    "href": "reference/parser.base.sphere_annotations.html",
    "title": "parser.base.sphere_annotations",
    "section": "",
    "text": "parser.base.sphere_annotations(state, layer_name, description=False, linked_segmentations=False, tags=False, group=False)\nGet all sphere annotation points and other info from a layer.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nLayer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist\nList of N 3-element center points (as list)\n\n\nlist\nList of N 3-element radii for each axis of the ellipsoid.\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True.\n\n\nlist\nList of group ids (as string) or None for annotations. Only returned if group=True"
  },
  {
    "objectID": "reference/parser.base.sphere_annotations.html#parameters",
    "href": "reference/parser.base.sphere_annotations.html#parameters",
    "title": "parser.base.sphere_annotations",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstate\ndict\nNeuroglancer state as JSON dict\nrequired\n\n\nlayer_name\nstr\nLayer name\nrequired\n\n\ndescription\nbool\nIf True, also returns descriptions as well. By default False\nFalse\n\n\nlinked_segmentations\nbool\nIf True, also returns list of linked segmentations, by default False\nFalse\n\n\ntags\nbool\nIf True, also returns list of tags, by default False\nFalse"
  },
  {
    "objectID": "reference/parser.base.sphere_annotations.html#returns",
    "href": "reference/parser.base.sphere_annotations.html#returns",
    "title": "parser.base.sphere_annotations",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist\nList of N 3-element center points (as list)\n\n\nlist\nList of N 3-element radii for each axis of the ellipsoid.\n\n\nlist\nList of N strings (or None), only returned if description=True.\n\n\nlist\nList of N lists of object ids. Only returned if linked_segmentations=True.\n\n\nlist\nList of N lists of tag ids. Only returned if tags=True.\n\n\nlist\nList of group ids (as string) or None for annotations. Only returned if group=True"
  }
]